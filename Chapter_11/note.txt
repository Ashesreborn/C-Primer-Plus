11.1
	
	1.puts()函数只显示字符串,而且自动在显示的字符串末尾加上换行符
	2.字符串字面量(string literal):用双引号括起来的内容,也叫字符串常量(string constant)
	3.双引号中的字符和编译器自动加入末尾的\0字符,都作为字符串储存在内存中
	4.从ANSI C标准起,如果字符串字面量之间没有间隔,或者用空白字符分隔,C会将其视为串联起来的字符串字面量
		char greeting[50] = "Hello, and"" how are" " you"
							" today!";
		与下面的代码等价
		char greeting[50] = "Hello, and how are you today!";
	5.如果要在字符串内部使用双引号,必须在双引号前面加上一个反斜杠(\)
	6.字符串常量属于静态存储类别(static storage class),这说明如果在函数中使用字符串常量,该字符串只会被储存一次,在整个程序的生命周期内存在,即使函数调用多次
	7.在指定数组的大小时,要确保数组的元素个数至少比字符串长度多一(为了容纳空字符)
	8.所有未被使用的元素都被初始化为0(这里的0值得是char形式的空字符,不是数字字符0)
	9.递增运算符只能用于变量名前,不能用于常量
	10.初始化数组把静态存储区的字符串拷贝到数组中,而初始化指针只把字符串的地址拷贝给指针
	11.初始化字符数组来储存字符串和初始化指针来指向字符串有何区别：
		(1).数组名是常量,而指针名是变量
		(2).两者都可以使用数组表示法,两者都能进行指针加法操作
		(3).只有指针表示法可以进行递增操作
	12.数组的元素是变量(除非数组被声明为const),但是数组名不是变量
	13.建议在把指针初始化为字符串字面量时使用const限定符
	14.打算修改字符串,就不要用指针指向字符串字面量
	15.如果要用数组表示一系列待显示的字符串,请使用指针数组,因为它比二维字符数组的效率高
	16.如果要改变字符串或为字符串输入预留空间,不要使用指向字符串字面量的指针

11.2
	
	1.未初始化的指针可能会指向任何地方
	2.gets()函数读取整行输入,直至遇到换行符,然后丢弃换行符,储存其余字符,并在这些字符的末尾添加一个空字符使其称为一个C字符串
	3.gets()无法检查数组是否装得下输入行.gets()函数只知道数组的开始处,并不知道数组中有多少个元素
	4.如果gets()函数中输入字符串过长,会导致缓冲区溢出(buffer overflow),即多于的字符超出了指定的目标空间
	5.C11标准委员会直接从标准中废除了gets()函数
	6.过去通常用fgets()来代替gets().
	7.fgets()通过第二个参数限制读入的字符数来解决溢出的问题.该函数专门设计用于处理文件输入
	8.fgets()和gets()的区别:
		(1).fgets()函数的第二个参数指明了读入字符的最大数量.如果该参数的值是n，那么fgets()将读入n-1个字符, 或者读到遇到第一个换行符为止.
		(2).如果fgets()读到一个换行符,会把它储存在字符串中。这点与gets()不同,gets()会丢弃换行符
		(3).fgets()函数的第三个参数指明要读入的文件.如果读入从键盘输入的数据，则以stdin(标准输入)作为参数,该标识符定义在stdio.h中
	9.puts()函数会在待输出字符串末尾添加一个换行符,而fputs()不会这样做
	10.C11新增的gets_s函数(可选)和fgets()类似,用一个参数限制读入的字符数
	11.gets_s()和fgets()的区别：
		(1).get_s()只从标准输入中读取数据,所以不需要第三个参数
		(2).如果gets_s()读到换行符,会丢弃它而不是储存它
		(3).如果gets_s()读到最大字符数都没有读到换行符,会执行一下几步。首先把目标数组中首字符设置为空字符,读取并丢弃随后的输入直至读到换行符或文件结尾,然后返回空指针。
			接着，调用依赖实现的"处理函数"(或你选择的其他函数)，可能会中止或退出程序。
	12.fgets()会保留输入末尾的换行符作为字符串的一部分,要编写额外的代码将其替换成空字符
	13.如果输入行太长：
		(1).使用gets()不安全,它会擦写现有的数据,存在安全隐患
		(2).gets_s()函数很安全,但是,如果并不希望程序中止或退出,就要知道如何编写特殊的"处理函数"。另外,如果打算让程序继续运行,gets_s()会丢弃输入行的其余字符,无论你是否需要
	14.丢弃过长输入行中的余下字符,是为了防止输入行中多出来的字符会被留在缓冲区中,成为下一次读取语句的输入
	15.scanf()函数有两种方法确定输入结束.无论哪种方法,都从第一个非空白字符作为字符串的开始,如果使用%s转换说明,以下一个空白字符(空行、空格、制表符或换行符)作为字符串的
		结束(字符串不包括空白字符)。如果指定了字段宽度,如%10s,那么scanf()将读取10个字符或读到第一个空白字符停止
	16.scanf()的典型用法时读取并转换混合数据类型为某种标准形式

11.3
	
	1.fputs()函数的第2个参数指明要写入数据的文件,如果要打印在显示器上,可以用定义在stdio.h中的stdout(标准输出)作为该参数
	2.与puts()不同,fputs()不会在输出的末尾添加换行符
	3.gets()丢弃输入中的换行符,但是puts()在输出中添加换行符.另一方面,fgets()保留输入中的换行符,fputs()不在输出中添加换行符

11.5

	1.库函数提供了多个处理字符串的函数,ANSI C把这些函数的原型放在string.h头文件中
	2.strcat()函数无法检查第1个数组是否能容纳第2个字符串
	3.strcmp()函数中连个字符串参数相同,该函数就返回0,否则就返回非零值
	4.strcmp()函数中：
		(1).如果在字母表中第一个字符串位于第二个字符串前面,strcmp()中就返回负数
		(2).如果第一个字符串在第二个字符串后面,strcmp()返回正数
	5.strcmp()函数比较的是字符串,不是字符，所以其参数应该是字符串,而不是字符
	6.使用strcmp()比较字符串,使用 == 比较字符
	7.strcpy()函数相当于字符串赋值运算符
	8.strcpy()第二个参数指向的字符被拷贝至第一个参数指向的数组中。拷贝出来的字符串被称为目标字符串,最初的字符串被称为源字符串
	9.声明数组将分配储存数据的空间,而声明指针只分配储存一个地址的空间
	10.strcpy()的返回类型是char * , 该函数返回的是第一个参数的值,即一个字符的地址
	11.strcpy()第一个参数不必指向数组的开始
	12.strcpy()和strcat()都有同样的问题,它们都不能检查目标空间是否能容纳源字符串的副本
	13.sprintf()函数声明在stdio.h中,而不是在string.h中
	14.sprintf()把数据写入字符串,而不是打印在显示器上。因此,该函数可以把多个元素合成一个字符串

11.7
	
	1.ToUpper()和Punctcount()-----P362
	2.fgets()和strchar组合,读取一行输入并把换行符换成空字符。这种方法与使用s_gets()的区别是:s_gets()会处理输入行剩余字符(如果有的话),为下一次输入做好准备

11.8
	
	1.C编译器允许main()没有参数或者有两个参数
	2.main()有两个参数时,第1个参数是命令行中字符串的数量.过去,这个int类型的参数被称为argc(表示参数计数(argument count)).系统用空格表示一个字符串的结束和下一个字符串的开始
	3.程序把命令行字符串储存在内存中,并把每个字符串的地址储存在指针数组中.而该数组的地址被储存在main()的第2个参数中。
	4.按照惯例,这个指向指针的指针称为argv(表示参数值[argument value])

11.9
	
	1.C要求用数值形式进行数值计算.但是在屏幕上显示数字则要求字符串形式,因为屏幕显示的是字符
	2.printf()和sprintf()函数,通过%d和其他转换说明,把数字从数值形式转换为字符串形式
	3.scanf()可以把输入字符转换为数值形式
	4.atoi()函数用于把字母数字转换成整数,该函数接受一个字符串作为参数,返回相应的整数值
	5.atoi()只把开头的字符串转换为字符
	6.atof()函数把字符串转换成double类型的值
	7.atol()函数把字符串转换成long类型的值
	8.strtol()把字符串转换成long类型的值,strtoul()把字符串转换成unsigned long类型的值,strtod()把字符串转换成double类型的值.
	  这些函数的智能之处在于识别和报告字符串中的首字符串是否是数字。