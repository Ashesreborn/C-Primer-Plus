5.2
	
	1.pow(3.5,2.2)返回3.5的2.2次幂
	2.C使用可修改的左值(modifiable lvalue)标记那些可赋值的实体
	3.用于储存值的数据存储区域统称为数据对象(data object)
	4.左值(lvalue)是C语言的术语,用于标识特定数据对象的名称或表达式
	5.对象指的是实际的数据存储，而左值是用于标识或定位存储位置的标签
	6.可修改的左值(modifiable lvalue):标识可修改的对象
	7.表达式的值(value of an expression)
	8.项即运算对象(operand),运算对象是运算符操作的对象
	9.三重赋值，顺序为从右往左
	10.整数除法结果的小数部分被丢弃，这一过程被称为截断
	11.浮点数和整数相除时，整数会被转换为浮点数
	12.C99规定负数的整数除法使用趋零截断，-3.8转换为-3
	13.一元运算符和赋值运算符的结合律从右往左
	14.结合律只适用于共享同一对象运算符
	15.sizeof 是一个无符号整数类型
	16.负数求模中第一个运算对象是负数，求模的结果为负数,第一个运算对象是正数，求模的结果为正数
	17.递增运算符的两个优点:
	   (1).紧凑的结构代码让程序更为简洁,可读性更高
	   (2).生成的机器语言代码效率更高
	18.单独使用递增运算符是，使用哪种形式都没关系.但是，当运算符和运算对象是更复杂表达式的一部分是,使用前缀或后缀的效果不同
	19.while (++shoe < 18.5)
	   该测试条件相当于提供了一个鞋子尺码到18的表.如果使用shoe++而不是++shoes,尺码表会增至19.因为shoe会在与18.5进行比较之后才递增,而不是先递增再比较
	20.b = ++i; //如果使用i++，会得到不同的结果
	   应该使用下列语句:
	   ++i;
	   b = i;
5.3
	
	1.n++表示先使用n,再递增;而++n表示先递增n,再使用
	2.如果一个变量出现在一个函数的多个参数中,不要对该变量使用递增或递减运算符；
	  如果一个变量多次出现在一个表达式中，不要对该变量使用递增或递减运算符

5.4

	1.每个表达式都有一个值
	2.语句为表达式加分号
	3.根据C标准，声明不是语句
	4.语句主要作用是对表达式求值,其副作用是把右值赋给可修改的左值,递增和递减运算符也有副作用,使用他们的主要目的是使用其副作用，类似的,printf()函数显示的信息其实是副作用
	5.序列点(sequence point)是程序执行的点,在该点上,所有的副作用都在进入下一步之前发生
	6.C语言语句中的分号标记了一个序列点
	7.完整表达式(full expression):就是指这个表达式不是另一个更大表达式的子表达式。例如表达式语句中的表达式和while循环中的作为测试条件的表达式，都是完整表达式。

5.5

	1.当类型转换出现在表达式时,无论是unsigned还是signed的char和short都会被自动转化成int,如有必要会被转换成unisnged int
	2.涉及两种类型的运算，两个值会被分别转换成两种类型的更高级别
	3.在赋值表达式语句中,计算的最终结果会被转换成被赋值变量的类型
	4.当作为函数参数传递时,char和short被转换成int,float被转换成double
	5.在ANSI C之前,C使用的是函数声明,而不是函数原型。函数声明只指明了函数名和返回值类型,没有指明参数类型