1.1	C语言的起源
		1972
		贝尔实验室的丹尼斯.里奇(Dennis Ritch)和肯.汤普逊(Ken Thompson)
		
	
1.2	选择理由
		
		1.设计特性(自顶向下、结构化编程和模块化设计)
		2.高效性
		3.可移植性
		4.强大而灵活
		5.面向程序员
		
1.3
		(面向对象编程是一门哲学，它通过对语言建模来适应问题，而不是对问题建模来适应语言)
		
1.4	
		1.计算机以数字形式储存数字和字符，每个字符都有一个数字码，计算机载入寄存器的指令也以数字形式储存
		2.计算机程序最终必须以数字指令码(即，机器语言)来表示
		
15		
		1.高级语言编程不必用数字码表示指令，其次，使用的指令更贴近你如何想这个问题，而不是类似计算机那样繁琐的步骤
		2.可以在更抽象的层次表达你的想法，不用考虑CPU在完成任务时具体需要那些步骤
		3.编译器把高级语言程序翻译成计算机能理解的机器语言指令集的程序

1.6
		1978年，布莱恩.柯林汉(Brian Kernighan)和丹尼斯.里奇(Dennis Ritchie)合著的The C Programming Language(《C语言程序设计》)第一版是公认的C标准，称之为K&R C或经典C
		1.1983年，美国国家标准协会(ANSI)组建委员会 (X3J11)
		2.1989年，ANSI C公布，该标准定义了C语言和C库
		3.1990年，国际标准化组织采用了ANSI C，称之为ISO C
		4.ANSI/ISO的标准的最终版本通常叫C89(因为ANSI于1989年批准该标准)或C90(因为ISO于1990年批准该标准)
		5.1994年，ANSI/ISO联合委员会(C9X委员会)开始修订C标准，最终发布了C99标准(新目标：国际化，弥补缺陷和提高计算的实用性)
		6.2011年，发布了C11标准

1.7		
		1.C是编译型语言
		2.定义程序目标->设计程序->编写代码->编译->运行程序->测试和调试程序->维护和修改程序
		3.定义程序目标：自己想做什么，程序需要哪些信息，要进行哪些控制和计算，程序应该报告什么信息
		4.设计程序：用户界面？如何组织程序？目标用户？花费时间？
		5.调试：查找并修复程序错误的过程

1.8	编程机制

		1.文件以.C结尾，点号(.)前面的部分称为基本名(basename),点号后面的称为扩展名(extension)
		2.链接器：把你编写的目标代码、系统的标准启动代码和库代码这3部分合并成一个文件
		3.UNIX区分大小写
		4.gcc和clang命令都可以根据不通的版本选择运行时选型来调用不同的C标准
		  gcc -std=c99 filename
		  gcc -std=c1x filename
		  gcc -std=c11 filename
		5.C编译器生成的中间代码文件的扩展名双是.obj
		6.不希望窗口立即消失：程序末尾加    getchar();
		7.不能通过Windows系统访问Linux文件，但是可以通过Linux系统访问Windows文档